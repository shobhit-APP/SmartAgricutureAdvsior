package com.example.common.DTO;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;

/**
 * DTO for representing crop data.
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
public class CropDto {

    /**
     * Unique identifier for the crop (optional for creation, auto-generated by DB).
     */
    private Long id;

    /**
     * State where the crop is available (required).
     */
    @NotBlank(message = "State is required")
    private String state;

    /**
     * District where the crop is available (required).
     */
    @NotBlank(message = "District is required")
    private String district;

    /**
     * Market where the crop is sold (required).
     */
    @NotBlank(message = "Market is required")
    private String market;

    /**
     * Name of the crop (required).
     */
    @NotBlank(message = "Crop name is required")
    private String cropName;

    /**
     * Date when the crop arrives (required, must not be null).
     */
    @NotNull(message = "Arrival date is required")
    private LocalDate arrivalDate;

    /**
     * Minimum price of the crop (required, must be non-negative).
     */
    @NotNull(message = "Minimum price is required")
    @Min(value = 0, message = "Minimum price must be non-negative")
    private Double minPrice;

    /**
     * Maximum price of the crop (required, must be non-negative).
     */
    @NotNull(message = "Maximum price is required")
    @Min(value = 0, message = "Maximum price must be non-negative")
    private Double maxPrice;

    /**
     * Suggested price for the crop (required, must be non-negative).
     */
    @NotNull(message = "Suggested price is required")
    @Min(value = 0, message = "Suggested price must be non-negative")
    private Double suggestedPrice;

    /**
     * Second suggested price for the crop (required, must be non-negative).
     */
    @NotNull(message = "Second suggested price is required")
    @Min(value = 0, message = "Second suggested price must be non-negative")
    private Double suggestedPriceSecond;

    /**
     * Third suggested price for the crop (required, must be non-negative).
     */
    @NotNull(message = "Third suggested price is required")
    @Min(value = 0, message = "Third suggested price must be non-negative")
    private Double suggestedPriceThird;

    /**
     * Best price for the crop (required, must be non-negative).
     */
    @NotNull(message = "Best price is required")
    @Min(value = 0, message = "Best price must be non-negative")
    private Double bestPrice;

    /**
     * ID of the user associated with the crop (required).
     */
    @NotNull(message = "User ID is required")
    private Long userId;

}